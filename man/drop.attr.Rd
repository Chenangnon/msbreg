% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/drop_attr.R
\name{drop.attr}
\alias{drop.attr}
\alias{drop.attr.fisher.matrix}
\title{Drop Attributes}
\usage{
drop.attr(x, ...)

\method{drop.attr}{fisher.matrix}(x, radical = NULL, ...)
}
\arguments{
\item{x}{any \code{R} object.}

\item{...}{further arguments passed to or from other methods.
Currently not used.}

\item{radical}{character, optional prefix to be used to build
a simplified \link{dim} attribute for \code{x}.}
}
\value{
For the default method,
an object identical to the input \code{x},
but with all attributes set to \code{NULL},
except for the \link{class} of \code{x}.

For the \code{'fisher.matrix'} method,
a \code{dim} attribute is additionally conserved
when \code{radical} is not \code{NULL}.
}
\description{
Remove Attributes from Objects. This is a generic with
a default method which remove the \code{'names'} attribute
from a vector input (the \code{'names'} attribute is set
to \code{NULL}) and \code{'dimnames'} from a matrix input.
For all other class object, the default method strips out
all \link{attributes} of the input \code{x}, except for the
\link{class} of \code{x}.
}
\details{
Methods can be written for \code{drop.attr} to remove
(from an object) certain attributes that are not (or no longer)
useful in a given context. This can be useful to remove attributes
before saving an object for a specific use for which, some attributes
are not of any use. For an object with a large amount of information
saved as attributes, this will make the object smaller in size and
may reduce the disk space required for saving.
The function may also be useful for displaying an object without
attributes that may be distracting or take too much space.

Note that if mandatory information for a class of objects
is stored as an attribute rather than a slot, a call
to \code{drop.attr} would remove such information
and make the object an invalid member of the class.
Also note that the behavior of many objects when passed
through many generic functions depend on their
attributes, hence removing attributes will most likely
change the result of such generic functions, or result
into errors (methods defined for a class may require
some attributes during processing).
}
\examples{
# Create a named numeric vector
Vec <- c(`(Intercept)` = 1, x1 = 3, x2 = 5)
Vec

# Remove the 'names' attributes and display
drop.attr(Vec)

}
\seealso{
\link{attributes} for details on object attributes.
}
